plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.springdoc.openapi-gradle-plugin" version "1.7.0"
	id "jacoco"
	id "org.sonarqube" version "5.0.0.4638"
}

group = 'br.com.fiap'
version = '0.0.1-SNAPSHOT'


java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.7"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.modelmapper:modelmapper:3.2.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.1'
	implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.0.2'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.1.5'
	implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.11'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws-messaging', version: '2.2.1.RELEASE'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.3'
	runtimeOnly 'com.h2database:h2'

	compileOnly group: 'jakarta.enterprise', name: 'jakarta.enterprise.cdi-api', version: '4.0.1'

}

sonar {
	properties {
		property "sonar.projectKey", "FIAP-GRUPO-G57_pagamento-service-fase-4"
		property "sonar.organization", "fiap-grupo-g57"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.token", System.getenv("SONAR_TOKEN")
		property("sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml")

	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		xml.outputLocation = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")

	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/sun/**', '**/com/sun/**', '**/*$*'])
		}))
	}
}

jar {
	manifest {
		attributes 'Main-Class': 'br.com.fiap.pagamento.service.PagamentoServiceFase4Application'
	}
	from sourceSets.main.output
}

tasks.named('test') {
	useJUnitPlatform()
	include '**/*Test.class', '**/*Tests.class', '**/*TestSuite.class' , '**/CocumberTest.class'

	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat = 'full'
	}

	finalizedBy jacocoTestReport
}
